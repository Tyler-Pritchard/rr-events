// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using rr_events.Data;

#nullable disable

namespace rr_events.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250413201340_SeedStaticEvents")]
    partial class SeedStaticEvents
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("rr_events.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EnhancedExperienceLink")
                        .HasColumnType("text");

                    b.Property<bool>("EnhancedExperienceSoldOut")
                        .HasColumnType("boolean");

                    b.Property<string>("EventImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SupportingActsSerialized")
                        .HasColumnType("text");

                    b.Property<string>("TicketLink")
                        .HasColumnType("text");

                    b.Property<bool>("TicketsSoldOut")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TourName")
                        .HasColumnType("text");

                    b.Property<string>("Venue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Opening night of the West Coast tour",
                            EndTimeUtc = new DateTime(2025, 4, 26, 23, 0, 0, 0, DateTimeKind.Utc),
                            EnhancedExperienceSoldOut = false,
                            EventImageUrl = "https://example.com/seattle.png",
                            IsPrivate = false,
                            Location = "Seattle, WA",
                            StartTimeUtc = new DateTime(2025, 4, 25, 19, 0, 0, 0, DateTimeKind.Utc),
                            SupportingActsSerialized = "[\"Local Opener\"]",
                            TicketLink = "https://example.com/seattle-tickets",
                            TicketsSoldOut = true,
                            Title = "Rob Rich: Seattle Show",
                            TourName = "Dark Roads Tour",
                            Venue = "Neptune Theater"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Next stop on the tour",
                            EndTimeUtc = new DateTime(2025, 4, 18, 22, 13, 39, 491, DateTimeKind.Utc).AddTicks(8560),
                            EnhancedExperienceLink = "https://example.com/portland-vip",
                            EnhancedExperienceSoldOut = false,
                            EventImageUrl = "https://example.com/portland.png",
                            IsPrivate = false,
                            Location = "Portland, OR",
                            StartTimeUtc = new DateTime(2025, 4, 18, 20, 13, 39, 491, DateTimeKind.Utc).AddTicks(8460),
                            SupportingActsSerialized = "[\"Special Guest\"]",
                            TicketLink = "https://example.com/portland-tickets",
                            TicketsSoldOut = false,
                            Title = "Rob Rich: Portland Show",
                            TourName = "Dark Roads Tour",
                            Venue = "Crystal Ballroom"
                        });
                });

            modelBuilder.Entity("rr_events.Models.Event", b =>
                {
                    b.OwnsOne("rr_events.Models.PresaleDetails", "FanClubPresale", b1 =>
                        {
                            b1.Property<int>("EventId")
                                .HasColumnType("integer");

                            b1.Property<string>("AccessCode")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("EndUtc")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime?>("StartUtc")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("EventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.Navigation("FanClubPresale");
                });
#pragma warning restore 612, 618
        }
    }
}
