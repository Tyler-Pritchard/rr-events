// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using rr_events.Data;

#nullable disable

namespace rr_events.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250413220725_SyncModelWithSlug")]
    partial class SyncModelWithSlug
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("rr_events.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EnhancedExperienceLink")
                        .HasColumnType("text");

                    b.Property<bool>("EnhancedExperienceSoldOut")
                        .HasColumnType("boolean");

                    b.Property<string>("EventImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SupportingActsSerialized")
                        .HasColumnType("text");

                    b.Property<string>("TicketLink")
                        .HasColumnType("text");

                    b.Property<bool>("TicketsSoldOut")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TourName")
                        .HasColumnType("text");

                    b.Property<string>("Venue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("rr_events.Models.Event", b =>
                {
                    b.OwnsOne("rr_events.Models.PresaleDetails", "FanClubPresale", b1 =>
                        {
                            b1.Property<int>("EventId")
                                .HasColumnType("integer");

                            b1.Property<string>("AccessCode")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("EndUtc")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime?>("StartUtc")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("EventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.Navigation("FanClubPresale");
                });
#pragma warning restore 612, 618
        }
    }
}
